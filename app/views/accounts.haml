#new-transaction{:style => "display: none; width: 600px; text-align: center"}
  %b{:style => 'font-size: 24px; text-align: center;background: #eee; display: block; margin: -10px -10px 0px -10px; padding: 5px'} New Transaction
  %form.newtransactionform{:style => "margin-right: 150px; text-align: right; font-size: 16px"}
    %p
      %label{:style => "font-weight: bold"} Transaction Number
      %label{:type => "text", :style => "margin-left: 158px"}= "%05.0f" % Transaction.count
    %p
      %label{:style => "font-weight: bold"} Customer
      %select{:style => "width: 177px; margin-left: 20px", :name => "jumper_id"}
        -Jumper.all.each do |jumper|
          %option{:value => jumper.id}= jumper.name
    %br
    %br
    %p
      %label{:style => "font-weight: bold"} Payment Type
      %select{:style => "width: 177px; margin-left: 20px", :name => "type"}
        %option{:value => "withdrawl"} Withdrawl
        %option{:value => "debit"} Debit
        %option{:value => "transfer"} Transfer
    %p
      %label{:style => "font-weight: bold"} Amount
      %input{:type => "text", :size => "30", :style => "margin-left: 20px", :name => "amount"}
    %br
    %p
      %label{:style => "font-weight: bold"} Notes
      %input{:type => "text", :size => "30", :style => "margin-left: 20px", :name => "notes"}
    %br
    .left{:style => "display: inline; margin-right: 12px"}        
      %a.awesome.giant.green{:href => "#create-transaction", :onClick => "createTransaction(this); return false;"} Create Transaction
    .left{:style => "display: inline;margin-right: -13px"}
      %a.awesome.medium.gray{:href => "#", :onClick => "$.facebox.close(); return false;"} Cancel
.box.box-100.altbox
  / .altbox for alternative box's color
  .boxin
    .header
      %h3 Transactions
      %a.ico-plus{:href => "#new-transaction", :rel => "facebox", :style => "margin-left: 0px"} &nbsp;
      %input#transactionsearch.search{:type => "text", :size => "45", :style => "margin-left: 525px", :name => "transactionsearch", :placeholder => "Filter transactions..."}
    .content
      %table#transactiontable{:cellspacing => "0"}
        %thead
          %tr
            %th{:style => "width: 20px; padding-left: 10px"} Valid
            %td.tc{:style => "width: 40px"} #
            %td.tc{:style => "width: 100px"} Date
            %td{:style => "width: 120px"} Customer Name
            %td{:style => "width: 80px"} Payment Type
            %td.tc{:style => "width: 60px"} Amount ($)
            %td.tc Details
            %td.tc{:style => "width: 80px"} Balance
        %tbody.striped
          -Transaction.all.sort_by{|t| t.transaction_number}.reverse.each_with_index do |transaction, i|
            %tr{:class => ( i == 0 ? "first" : "")}
              %th.tc
                -if transaction.valid
                  %img{:src => "/css/img/available.png"}
                -else
                  %img{:src => "/css/img/unavailable.png"}
              %td.tc= "%05.0f" % transaction.transaction_number
              %td.tc= Time.parse(transaction.date).strftime("%m/%d/%y %I:%M%p")
              
              %td
                -jumper = Jumper.get(transaction.jumper_id)
                %a{:href => "#"}= jumper.name
              %td
                -amount = transaction.amount.to_f
                -amount = 10.15 if amount.nil?
                
                %a{:href => "#"}= transaction.type.capitalize
            
              %td.tr
                %a.stat{:href => "#", :style => 'display: block; width: 100%; padding: 0; padding-right: 5px; margin: 0;margin-bottom: -5px; float: right', :class => (amount > 0 ? "green" : "red")}= "%5.2f" % amount.abs
              %td= transaction.notes
              %td.tr
                %a.stat{:href => "#", :style => 'display: block; width: 100%; padding: 0; padding-right: 5px; margin: 0;margin-bottom: -5px; float: right', :class => (amount > 0 ? "green" : "red")}= "%5.2f" % jumper.balance.to_f if jumper&&jumper.balance



:javascript
  function createTransaction(button){
    var form_data = $('.newtransactionform:last').serialize();  
    $.post(('/ajax/transaction?'+form_data), function(data) {
      $.facebox.close();
      $('#accounts').html(data);
    });
    return false;
  }
  function togglePaid(){
    box = $('.paid')
    if (box.attr('checked')){
      $('.paid').attr('checked', '');
    }else{
      $('.paid').attr('checked', 'checked');
      
    }
  }
  $(document).ready(function(){
    $('tbody.striped tr:even').addClass('even');
    
    $("#transactionsearch").keyup(function() {
      $.uiTableFilter( $("#transactiontable"), this.value );
    })
    $(".items, .store").sortable({
      connectWith: ['.connectedSortable']
    }).disableSelection();
  });
